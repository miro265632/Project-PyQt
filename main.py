import sys
import csv
import sqlite3
from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5 import uic  # Импортируем uic
from PyQt5.QtWidgets import QApplication, QMainWindow, QTableWidgetItem, QCheckBox, QPushButton, QFileDialog

# ТАБЛИЦА
from typing import Any

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1049, 836)
        font = QtGui.QFont()
        font.setPointSize(10)
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.create = QtWidgets.QPushButton(self.centralwidget)
        self.create.setGeometry(QtCore.QRect(710, 170, 171, 61))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.create.setFont(font)
        self.create.setAutoDefault(True)
        self.create.setDefault(False)
        self.create.setObjectName("create")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(10, 10, 501, 801))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.verticalScrollBar = QtWidgets.QScrollBar(self.centralwidget)
        self.verticalScrollBar.setGeometry(QtCore.QRect(520, 10, 21, 801))
        self.verticalScrollBar.setOrientation(QtCore.Qt.Vertical)
        self.verticalScrollBar.setObjectName("verticalScrollBar")
        self.formLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.formLayoutWidget.setGeometry(QtCore.QRect(550, 10, 491, 141))
        self.formLayoutWidget.setObjectName("formLayoutWidget")
        self.formLayout = QtWidgets.QFormLayout(self.formLayoutWidget)
        self.formLayout.setContentsMargins(0, 0, 0, 0)
        self.formLayout.setObjectName("formLayout")
        self.label = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label)
        self.label_3 = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.label_3)
        self.label_2 = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_2)
        self.dedline = QtWidgets.QDateEdit(self.formLayoutWidget)
        self.dedline.setMinimumDateTime(QtCore.QDateTime(QtCore.QDate(2023, 11, 3), QtCore.QTime(0, 0, 0)))
        self.dedline.setObjectName("dedline")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.dedline)
        self.label_4 = QtWidgets.QLabel(self.formLayoutWidget)
        self.label_4.setObjectName("label_4")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.label_4)
        self.name_task = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.name_task.setObjectName("name_task")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.name_task)
        self.description = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.description.setObjectName("description")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.description)
        self.importance_box = QtWidgets.QComboBox(self.formLayoutWidget)
        self.importance_box.setMinimumContentsLength(0)
        self.importance_box.setObjectName("importance_box")
        self.importance_box.addItem("")
        self.importance_box.addItem("")
        self.importance_box.addItem("")
        self.importance_box.addItem("")
        self.importance_box.addItem("")
        self.importance_box.addItem("")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.importance_box)
        self.aaaaa = QtWidgets.QPushButton(self.centralwidget)
        self.aaaaa.setGeometry(QtCore.QRect(580, 610, 191, 61))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.aaaaa.setFont(font)
        self.aaaaa.setObjectName("aaaaa")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(870, 670, 101, 101))
        self.label_5.setText("")
        self.label_5.setPixmap(QtGui.QPixmap("belca.webp"))
        self.label_5.setObjectName("label_5")
        self.go_out = QtWidgets.QPushButton(self.centralwidget)
        self.go_out.setGeometry(QtCore.QRect(580, 700, 191, 61))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.go_out.setFont(font)
        self.go_out.setObjectName("go_out")
        self.update = QtWidgets.QPushButton(self.centralwidget)
        self.update.setGeometry(QtCore.QRect(710, 260, 171, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.update.setFont(font)
        self.update.setObjectName("update")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.create.setText(_translate("MainWindow", "Добавить задачу"))
        self.label.setText(_translate("MainWindow", "Название задачи"))
        self.label_3.setText(_translate("MainWindow", "Сроки"))
        self.label_2.setText(_translate("MainWindow", "Описание задачи"))
        self.label_4.setText(_translate("MainWindow", "Выберите уровень \n"
                                                      "важности задачи (от 0 до 5)"))
        self.importance_box.setItemText(0, _translate("MainWindow", "0"))
        self.importance_box.setItemText(1, _translate("MainWindow", "1"))
        self.importance_box.setItemText(2, _translate("MainWindow", "2"))
        self.importance_box.setItemText(3, _translate("MainWindow", "3"))
        self.importance_box.setItemText(4, _translate("MainWindow", "4"))
        self.importance_box.setItemText(5, _translate("MainWindow", "5"))
        self.aaaaa.setText(_translate("MainWindow", "Загрузить в .csv"))
        self.go_out.setText(_translate("MainWindow", "Выйти"))
        self.update.setText(_translate("MainWindow", "Обновить список дел"))


# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Widget.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_About(object):
    def setupUi(self, About):
        About.setObjectName("About")
        About.resize(746, 632)
        self.name1 = QtWidgets.QLabel(About)
        self.name1.setGeometry(QtCore.QRect(30, 80, 241, 61))
        font = QtGui.QFont()
        font.setPointSize(19)
        self.name1.setFont(font)
        self.name1.setTextFormat(QtCore.Qt.PlainText)
        self.name1.setObjectName("name1")
        self.description = QtWidgets.QLabel(About)
        self.description.setGeometry(QtCore.QRect(30, 230, 281, 251))
        font = QtGui.QFont()
        font.setPointSize(19)
        self.description.setFont(font)
        self.description.setObjectName("description")
        self.calendarWidget = QtWidgets.QCalendarWidget(About)
        self.calendarWidget.setGeometry(QtCore.QRect(320, 300, 401, 201))
        self.calendarWidget.setStyleSheet("border-color: rgb(193, 129, 193);\n"
                                          "font: 11pt \"Mongolian Baiti\";\n"
                                          "")
        self.calendarWidget.setObjectName("calendarWidget")
        self.dedline = QtWidgets.QLabel(About)
        self.dedline.setGeometry(QtCore.QRect(380, 80, 301, 61))
        font = QtGui.QFont()
        font.setPointSize(19)
        self.dedline.setFont(font)
        self.dedline.setObjectName("dedline")
        self.importance = QtWidgets.QLabel(About)
        self.importance.setGeometry(QtCore.QRect(30, 540, 121, 51))
        font = QtGui.QFont()
        font.setPointSize(23)
        self.importance.setFont(font)
        self.importance.setObjectName("importance")
        self.label = QtWidgets.QLabel(About)
        self.label.setGeometry(QtCore.QRect(30, 500, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(17)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(About)
        self.label_2.setGeometry(QtCore.QRect(30, 180, 221, 31))
        font = QtGui.QFont()
        font.setPointSize(17)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(About)
        self.label_3.setGeometry(QtCore.QRect(30, 36, 241, 31))
        font = QtGui.QFont()
        font.setPointSize(17)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(About)
        self.label_4.setGeometry(QtCore.QRect(380, 40, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(17)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.ok = QtWidgets.QPushButton(About)
        self.ok.setGeometry(QtCore.QRect(390, 540, 231, 51))
        self.ok.setObjectName("ok")
        self.delete_2 = QtWidgets.QPushButton(About)
        self.delete_2.setGeometry(QtCore.QRect(410, 240, 181, 41))
        self.delete_2.setObjectName("delete_2")
        self.label_5 = QtWidgets.QLabel(About)
        self.label_5.setGeometry(QtCore.QRect(380, 150, 151, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.closedd = QtWidgets.QLabel(About)
        self.closedd.setGeometry(QtCore.QRect(380, 180, 231, 41))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.closedd.setFont(font)
        self.closedd.setObjectName("closedd")

        self.retranslateUi(About)
        QtCore.QMetaObject.connectSlotsByName(About)

    def retranslateUi(self, About):
        _translate = QtCore.QCoreApplication.translate
        About.setWindowTitle(_translate("About", "Form"))
        self.name1.setText(_translate("About", "Названия задачи"))
        self.description.setText(_translate("About", "Описание"))
        self.dedline.setText(_translate("About", "Дата"))
        self.importance.setText(_translate("About", "Важность"))
        self.label.setText(_translate("About", "Важность"))
        self.label_2.setText(_translate("About", "Описание"))
        self.label_3.setText(_translate("About", "Название задачи"))
        self.label_4.setText(_translate("About", "Дата"))
        self.ok.setText(_translate("About", "OK"))
        self.delete_2.setText(_translate("About", "Удалить задачу"))
        self.label_5.setText(_translate("About", "Состояние задачи:"))
        self.closedd.setText(_translate("About", "Состояние задачи"))


class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)  # Загружаем дизайн
        # Обратите внимание: имя элемента такое же как в QTDesigner
        self.con = sqlite3.connect('data.db')  # подключение бд
        self.create.clicked.connect(self.update_data)
        self.aaaaa.clicked.connect(self.csv_write)
        self.update_result()
        self.go_out.clicked.connect(self.close)
        self.update.clicked.connect(self.update_)

    def csv_write(self):
        cur = self.con.cursor()
        res = cur.execute("SELECT name, importance, closed, description FROM tasks").fetchall()
        self.fname = QFileDialog.getSaveFileName(self, 'Выбрать файл', '')[0]
        with open(self.fname, 'w', newline='') as fp:
            a = csv.writer(fp, delimiter=';', quotechar='"', quoting=csv.QUOTE_MINIMAL)
            a.writerow([self.tableWidget.horizontalHeaderItem(i).text()
                        for i in range(self.tableWidget.columnCount())])
            a.writerows(res)

    def update_data(self):
        name_task = self.name_task.text()
        description = self.description.text()
        dedline = self.dedline.dateTime().toString()
        importance = self.importance_box.currentText()
        cursor = self.con.cursor()
        str = f'''INSERT INTO tasks
                            (name, dedline, description, importance)
                          VALUES
                          ('{name_task}', '{dedline}', '{description}', {importance});'''
        asd = f'''INSERT INTO 'check'
                            (namee)
                          VALUES
                          ('{name_task}');'''
        cursor.execute(asd)
        cursor.execute(str)
        self.con.commit()
        self.update_result()

    def update_(self):
        cur = self.con.cursor()
        # Получили результат запроса, который ввели в текстовое поле
        result = cur.execute("SELECT id, name, importance, closed FROM tasks ORDER BY -importance").fetchall()
        if result:
            # Заполнили размеры таблицы
            self.tableWidget.setRowCount(len(result))
            # Если запись не нашлась, то не будем ничего делать
            self.tableWidget.setColumnCount(len(result[0]))
            self.tableWidget.setHorizontalHeaderLabels(['Название', "Важность", "Выполнено", 'Инфо'])
            # Заполнили таблицу полученными элементами
            for i, elem in enumerate(result):
                elem = list(elem)
                b = elem[-1]
                elem[-1] = QCheckBox()
                elem[-1].setChecked(b)
                elem[-1].stateChanged.connect(lambda checked, x=elem[0]: self.update_checkBox(x))
                btn = QPushButton(f'Подробнее', self)
                btn.clicked.connect(lambda checked, x=elem[0]: self.about(x))
                elem.append(btn)

                for j, val in enumerate(elem[1:]):
                    if type(val) == QCheckBox or type(val) == QPushButton:
                        self.tableWidget.setCellWidget(i, j, val)
                    else:
                        item = QTableWidgetItem(str(val))
                        self.tableWidget.setItem(i, j, item)

    def update_result(self):
        cur = self.con.cursor()
        # Получили результат запроса, который ввели в текстовое поле
        result = cur.execute("SELECT id, name, importance, closed FROM tasks ORDER BY -importance").fetchall()
        if result:
            # Заполнили размеры таблицы
            self.tableWidget.setRowCount(len(result))
            # Если запись не нашлась, то не будем ничего делать
            self.tableWidget.setColumnCount(len(result[0]))
            self.tableWidget.setHorizontalHeaderLabels(['Название', "Важность", "Выполнено", 'Инфо'])
            # Заполнили таблицу полученными элементами
            for i, elem in enumerate(result):
                elem = list(elem)
                b = elem[-1]
                elem[-1] = QCheckBox()
                elem[-1].setChecked(b)
                elem[-1].stateChanged.connect(lambda checked, x=elem[0]: self.update_checkBox(x))
                btn = QPushButton(f'Подробнее', self)
                btn.clicked.connect(lambda checked, x=elem[0]: self.about(x))
                elem.append(btn)

                for j, val in enumerate(elem[1:]):
                    if type(val) == QCheckBox or type(val) == QPushButton:
                        self.tableWidget.setCellWidget(i, j, val)
                    else:
                        item = QTableWidgetItem(str(val))
                        self.tableWidget.setItem(i, j, item)

    def update_checkBox(self, _id):
        cursor = self.con.cursor()
        aaa = f''' UPDATE tasks SET closed = {int(self.sender().isChecked())} WHERE id = {_id}'''
        bbb = f''' UPDATE 'check' SET closedd = {int(self.sender().isChecked())} WHERE idd = {_id}'''
        cursor.execute(bbb)
        cursor.execute(aaa)
        self.con.commit()

    def about(self, _id):
        self.qrt = MyWidget2(_id)
        self.qrt.show()
        # нужны ид и по ним получать всю инфу о задаче. ид не выводить(срез)

        # Имя элемента совпадает с objectName в QTDesigner


class MyWidget2(QMainWindow, Ui_About):
    def __init__(self, _id):
        super().__init__()
        self.id = _id
        self.con = sqlite3.connect('data.db')
        self.setupUi(self)
        self.output()
        self.ok.clicked.connect(self.close)
        self.delete_2.clicked.connect(self.delette)
        self.delete_2.clicked.connect(self.close)

        # self.clicked.connect(self.onClick)

    # def onClick(self, date):
    # brush = QBrush()
    # brush.setColor(Qt.green)
    # charformat = self.dateTextFormat(date)
    # charformat.setBackground(brush)
    # self.setDateTextFormat(date, charformat)
    # style = 'QTableView{selection-background-color: green;' \
    # 'selection-color: black;}'
    # self.setStyleSheet(style)

    def output(self):
        cur = self.con.cursor()
        name = cur.execute(f'''SELECT name FROM tasks WHERE id = {self.id}''').fetchone()
        description = cur.execute(f'''SELECT description FROM tasks WHERE id = {self.id}''').fetchone()
        dedline = cur.execute(f'''SELECT dedline FROM tasks WHERE id = {self.id}''').fetchone()
        importance = cur.execute(f'''SELECT importance FROM tasks WHERE id = {self.id}''').fetchone()
        closedd = cur.execute(f'''SELECT closedd FROM 'check' WHERE idd = {self.id}''').fetchone()
        print
        if str(*closedd) == '1':
            self.closedd.setText('Задача выполнена')
        else:
            self.closedd.setText('Задача не выполнена')

        self.name1.setText(*name)
        self.name1.setWordWrap(True)
        self.description.setText(*description)
        self.description.setWordWrap(True)
        self.dedline.setText(*dedline)
        self.importance.setText(str(*importance))

    def delette(self):
        cur = self.con.cursor()
        sql_delete = f'''DELETE from tasks where id = {self.id}'''
        sql_deletee = f'''DELETE from 'check' where idd = {self.id}'''
        cur.execute(sql_delete)
        cur.execute(sql_deletee)
        self.con.commit()


if hasattr(QtCore.Qt, 'AA_EnableHighDpiScaling'):
    QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling, True)

if hasattr(QtCore.Qt, 'AA_UseHighDpiPixmaps'):
    QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_UseHighDpiPixmaps, True)


def except_hook(cls, excpection, traceback):
    sys.__excepthook__(cls, excpection, traceback)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    app.setStyleSheet(
        " QLabel{font-size: 13pt;} QLabel{background-color:#FEC5CF} QPushButton{font-size: 12pt;} QPushButton{background-color:#FF9EB8} "
        "QPushButton{border-radius: 10px}")
    form = MainWindow()
    form.show()
    sys.excepthook = except_hook
    sys.exit(app.
    exec ())
